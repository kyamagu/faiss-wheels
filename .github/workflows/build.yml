name: Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.arch }}, ${{ matrix.gpu }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]
        arch: [auto64]
        gpu: [OFF]
        include:
          - os: ubuntu-20.04
            arch: aarch64
            gpu: OFF
          - os: macos-10.15
            arch: arm64
            gpu: OFF
          - os: ubuntu-20.04
            arch: auto64
            gpu: ON
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.arch != 'auto64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Set up miniconda
        if: runner.os == 'Windows'
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: '3.8'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.1
        env:
          CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT: FAISS_OPT_LEVEL=generic FAISS_ENABLE_GPU=${{ matrix.cuda }}
          CIBW_BEFORE_ALL: bash scripts/build_${{ runner.os }}.sh
          CIBW_BEFORE_BUILD: pip install numpy
          CIBW_TEST_REQUIRES: pytest scipy
          CIBW_TEST_COMMAND: python -m pytest {project}
          CIBW_TEST_SKIP: "*-macosx_arm64"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  publish:
    name: Upload packages to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
